package $!{classPackage}.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import org.apache.log4j.Logger;

import $!{classPackage}.entity.$!{className};
import $!{classPackage}.repository.$!{className}Repository;
import $!{classPackage}.service.$!{className}Service;
import $!{classPackage}.util.PageInfoUtil;

/**
 * $!{comment}业务逻辑实现类
 *
 * @author $!{authorName}
 * @email  $!{authorEmail}
 * @date   $!{createTime}
 */
@Service("$!{entityName}Service")
public class $!{className}ServiceImpl implements $!{className}Service {

    private static final Logger LOGGER = Logger.getLogger($!{className}ServiceImpl.class);

	@Autowired
	private $!{className}Repository $!{entityName}Repository;

    @Override
    public int save$!{className}($!{className} $!{entityName}) {
        return $!{entityName}Repository.save$!{className}($!{entityName});
	}

    @Override
    public int saveBatch$!{className}(List<$!{className}> $!{entityName}List) {
        return $!{entityName}Repository.saveBatch$!{className}($!{entityName}List);
	}

#if($keyFields.size() > 0)
    @Override
    public int delete$!{className}ByKey(#foreach(${field} in ${keyFields})#if($velocityCount == 1)$!{field.type} $!{field.entityName}#else, $!{field.type} $!{field.entityName}#end#end) {
        return $!{entityName}Repository.delete$!{className}ByKey(#foreach(${field} in ${keyFields})#if($velocityCount == 1)$!{field.entityName}#else, $!{field.entityName}#end#end);
	}

#end
#if($keyFields.size() == 1)
    @Override
    public int deleteBatch$!{className}ByKey(#foreach(${field} in ${keyFields})List<$!{field.type}> $!{field.entityName}s#end) {
        return $!{entityName}Repository.deleteBatch$!{className}ByKey(#foreach(${field} in ${keyFields})$!{field.entityName}s#end);
	}

#end
    @Override
    public int deleteBatch$!{className}ByParam($!{className} $!{entityName}) {
        return $!{entityName}Repository.deleteBatch$!{className}ByParam($!{entityName});
    }

#if($keyFields.size() > 0)
    @Override
    public int update$!{className}ByKey($!{className} $!{entityName}) {
#if($notNullfields.size() > 0)
#foreach ($!{field} in $!{notNullfields})
        if($!{entityName}.get$!{field.filedName}() == null) {
            LOGGER.error("--> $!{field.comment} 不能为null！" );
            return 0;
        }
#end
#end
        return $!{entityName}Repository.update$!{className}ByKey($!{entityName});
	}

    @Override
    public int updateBatch$!{className}ByKey(List<$!{className}> $!{entityName}List) {
#if($!{frame.serviceFrame} == "SPRINGBOOT")
#if($notNullfields.size() > 0)
        for($!{className} $!{entityName} : $!{entityName}List) {
#foreach ($!{field} in $!{notNullfields})
            if($!{entityName}.get$!{field.filedName}() == null) {
                LOGGER.error("--> $!{field.comment} 不能为null！" + $!{entityName});
                return 0;
            }
#end
        }
#end
        return $!{entityName}Repository.updateBatch$!{className}ByKey($!{entityName}List);
#elseif($!{frame.serviceFrame} == "SPRING")
        int isScuess = 0;
#if($notNullfields.size() > 0)
        for($!{className} $!{entityName} : $!{entityName}List) {
#foreach ($!{field} in $!{notNullfields})
                if($!{entityName}.get$!{field.filedName}() == null) {
                break;
            }
#end
            isScuess += update$!{className}ByKey($!{entityName});
        }
#end
        return isScuess;
#end
	}

    @Override
    public $!{className} get$!{className}ByKey(#foreach(${field} in ${keyFields})#if($velocityCount == 1)$!{field.type} $!{field.entityName}#else, $!{field.type} $!{field.entityName}#end#end) {
        return $!{entityName}Repository.get$!{className}ByKey(#foreach(${field} in ${keyFields})#if($velocityCount == 1)$!{field.entityName}#else, $!{field.entityName}#end#end);
	}

#end
#if($keyFields.size() == 1)
    @Override
    public List<$!{className}> list$!{className}ByKey(#foreach(${field} in ${keyFields})List<$!{field.type}> $!{field.entityName}s#end) {
        return $!{entityName}Repository.list$!{className}ByKey(#foreach(${field} in ${keyFields})$!{field.entityName}s#end);
	}

#end
    @Override
    public List<$!{className}> list$!{className}() {
        return $!{entityName}Repository.list$!{className}();
	}

    @Override
    public List<$!{className}> list$!{className}ByParam($!{className} $!{entityName}) {
        return $!{entityName}Repository.list$!{className}ByParam($!{entityName});
	}

    @Override
    public PageInfoUtil<$!{className}> list$!{className}ByPage(int pageNo, int pageSize) {
        pageNo = pageNo < 0 ? 0 : pageNo;
        pageSize = pageSize < 1 ? 1 : pageNo > 100 ? 100 : pageSize;
        PageHelper.startPage(pageNo, pageSize);
        PageInfo<$!{className}> $!{entityName}Page = new PageInfo<$!{className}>($!{entityName}Repository.list$!{className}());
        return new PageInfoUtil($!{entityName}Page.getList(), pageNo, pageSize, $!{entityName}Page.getTotal());
	}

    @Override
    public PageInfoUtil<$!{className}> list$!{className}ByParamAndPage($!{className} $!{entityName}, int pageNo, int pageSize) {
        pageNo = pageNo < 0 ? 0 : pageNo;
        pageSize = pageSize < 1 ? 1 : pageNo > 100 ? 100 : pageSize;
        PageHelper.startPage(pageNo, pageSize);
        PageInfo<$!{className}> $!{entityName}Page = new PageInfo<$!{className}>($!{entityName}Repository.list$!{className}ByParam($!{entityName}));
        return new PageInfoUtil($!{entityName}Page.getList(), pageNo, pageSize, $!{entityName}Page.getTotal());
	}

}
